// Generated by CodiumAI

// Generated by CodiumAI
/*
const {beforeEach, describe, it, jest} = require('@jest/globals'); 
*/
const expect = require('expect');
const InputType = {
    FILE: 'file',
    URL: 'url',
};
const inquirer = require('inquirer');
const fs = require('fs');
const cheerio = require('cheerio');
const scrape = require('../server');
const Inquirer = require('../Inquirer');
const {jest} = require("@jest/globals");

describe('scrape', () => {
    jest.mock('../Inquirer');


    beforeEach(() => {  
        jest.clearAllMocks();
    });

    // User selects 'file' as input type and provides a valid file path
    it('should read and parse HTML content when a valid file path is provided', async () => {

        jest.spyOn(inquirer, 'prompt').mockResolvedValue({
            inputType: InputType.FILE,
            input: '../html/test.html'
        });

        jest.spyOn(fs, 'readFileSync')
            .mockReturnValue('<html><body><p>Test</p></body></html>');

        const consoleLogSpy = jest
            .spyOn(console, 'log').mockImplementation(() => {});

        await scrape();

        expect(consoleLogSpy).toHaveBeenCalledWith('document parsed: ', expect.any(Number));
        expect(consoleLogSpy).toHaveBeenCalledWith('Test');

        consoleLogSpy.mockRestore();
    });

    // User provides an invalid file path
    it('should log an error message when an invalid file path is provided', async () => {
        const inquirer = require('inquirer');
        const fs = require('fs');
        const scrape = require('./server');

        jest.spyOn(inquirer, 'prompt').mockResolvedValue({
            inputType: 'file',
            input: './invalid/path.html'
        });

        jest.spyOn(fs, 'readFileSync').mockImplementation(() => {
            throw { code: 'ENOENT' };
        });

        const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation(() => {});

        await scrape();

        expect(consoleLogSpy).toHaveBeenCalledWith('HTML file not found');

        consoleLogSpy.mockRestore();
    });
});
